{
  "folders": [
    {
      "name": "Swift",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "vhYiJDpn",
      "createdAt": 1697954702226,
      "updatedAt": 1697954708956,
      "index": 0
    },
    {
      "name": "Typescript",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "6Xpe1L2B",
      "createdAt": 1698026648307,
      "updatedAt": 1698026655069,
      "index": 1
    },
    {
      "name": "Python",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "Btz7BEVz",
      "createdAt": 1698026658437,
      "updatedAt": 1698026670886,
      "index": 2
    },
    {
      "name": "Markdown",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "Vx9GQppL",
      "createdAt": 1698138350377,
      "updatedAt": 1739510232054,
      "index": 3
    },
    {
      "name": "Rust",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "qzhsCzAb",
      "createdAt": 1715057451358,
      "updatedAt": 1715057456316,
      "index": 4
    },
    {
      "name": "C++",
      "parentId": null,
      "isOpen": false,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "amHWqhN6",
      "createdAt": 1738891284934,
      "updatedAt": 1739510237311,
      "index": 5
    },
    {
      "name": "IDE",
      "parentId": null,
      "isOpen": true,
      "isSystem": false,
      "defaultLanguage": "plain_text",
      "id": "vs7wRccf",
      "createdAt": 1741158132683,
      "updatedAt": 1741158141476,
      "index": 6
    }
  ],
  "snippets": [
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "바코드 시음노트",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "# 바코드 시음노트\n\n## 아이디어\n- 바코드 인식을 이용한 빠른 시음노트\n- 바코드는 유니크한 값이므로 남이 작성한 정보가 이미 있으면 빠른 작성 가능\n- 팔로우 기능도 제공\n- https://www.barcodelookup.com/5000299211243 여기 크롤링하기\n\n## 기술 스택\n- 서버 rust [Actix](https://actix.rs/)\n\t- https://medium.com/@johannesfloriangeiger/securing-a-rust-api-with-auth0-494b407be020\n  - https://github.com/hatoo/auth0-rust-starter\n\t- ORM: [Diesel](https://github.com/diesel-rs/diesel)\n  \t- [예제](https://github.com/actix/examples/tree/master/databases/diesel)\n  - DB postgreSQL\n  - 인증: Auth0\n  \t- 7500 MAU까지만 무료\n  - 클라우드: AWS Lightsail\n  \t- 월 5달러정도\n- 클라이언트\n\t- iOS\n  \t- [TCA 패턴](https://velog.io/@flamozzi/TCAThe-Composable-Architecture-%ED%8C%A8%ED%84%B4%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%9C-SwiftUI-Sample-App-%EC%A0%9C%EC%9E%91-%EC%86%8C%EA%B0%90)\n    - Tuist\n- 디자인\n\t- Creatie: AI 디자인 툴\n  https://www.youtube.com/watch?v=bI7ZfJMi6Pk\n  https://kmong.com/portfolio/view/160217\n\n## 디테일\n- 로그인은 카카오(한국), 구글, 애플 로그인만 제공 (MVP에서는 애플 로그인만 제공)\n- 바코드를 찍으면 바로 상세정보(누가 등록을 이미 했다면)로 이동\n\t주종, 도수, 당도, 산도 정보들이 보이며 최종 별점과 괄호에 별점 매겨진 횟수 표시\n- 노트에는 향, 당도, 산도, 바디, 타닌 설명\n\t댓글도 표시\n- 술장 기능\n\t술병을 찍으면 자동으로 크롭해줌\n\t그걸 술장에 직접 드래그앤드롭\n\t술장 추가 및 술장 고급 디자인 유료\n  \n### UI 디자인\n- 홈화면: 네비게이션바 가운데에 QR 버튼\n\t1. 피드\n  2. 새로 등록된 주종\n  \n- 마이메뉴: 알림, 설정, 팔로워/팔로윙 관리, 내 프로필 관리, 내 시음노트 히스토리, 좋아요 리스트\n- 등록정보 화면: 당도, 산도, 바디, 타닌 등등은 전부 모든 데이터의 평균값으로 나옴\n- 등록하기 화면:\n\t\n  \n## MVP 이후에 구현할 목록\n- 바코드가 없는 주류 등록 기능\n- 푸시, 알림\n- 잘못된 정보 신고 기능\n\n\n## 수익구조\n- Admob 배너광고\n- 광고 없애기\n\t- 구독제 월(천원티어)\n  - 구독제 년(만원티어)"
        }
      ],
      "id": "QzSjpbSJ",
      "createdAt": 1697953982822,
      "updatedAt": 1742477859835
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": ""
        }
      ],
      "id": "fIdLzchw",
      "createdAt": 1697954691101,
      "updatedAt": 1697954769186
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vhYiJDpn",
      "tagsIds": [],
      "description": null,
      "name": "Swift GCD",
      "content": [
        {
          "label": "Fragment 1",
          "language": "swift",
          "value": "//임의의 큐\nDispatchQueue(label: \"kr.swifter.app.queue\").async {\t\n   selft.doSomething()\n}\n\n//메인 큐\nDispatchQueue.main.async {\n  self.doSomething()\n}\n\n//시스템에서 준비된 큐\nDispatchQueue.global(qos: .default).async {\n   self.doSomething()\n}\n\n// 지정한 시간 후 처리\nDispatchQueue.main.asyncAfter(deadline: DispatchTime.now() + .seconds(10)) {\n   self.doSomething()\n}\n\n// 모든 큐 처리 끝나면 특정작업 실행\nlet g = DispatchGroup()\nlet q1 = DispatchQueue(label: \"kr.swifter.app.queue1\")\nlet q2 = DispatchQueue(label: \"kr.swifter.app.queue2\")\nlet q3 = DispatchQueue(label: \"kr.swifter.app.queue3\")\n\nq1.async(group: g) {\n   print(\"queue1 완료\")\n}\n\nq2.async(group: g) {\n   print(\"queue2 완료\")\n}\n\nq3.async(group: g) {\n   print(\"queue3 완료\")\n}\n\ng.notify(queue: DispatchQueue.main) {\n   print(\"전체 작업완료\")\n}"
        }
      ],
      "id": "Tz6BSl58",
      "createdAt": 1697954730310,
      "updatedAt": 1698027125969
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "if / for",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "# for if 문 예제\nlanguages = ['python', 'perl', 'c', 'java']\nfor lang in languages:\n    if lang in ['python', 'perl']:\n        print(\"%6s need interpreter\" % lang)\n    elif lang in ['c', 'java']:\n        print(\"%6s need compiler\" % lang)\n    else:\n        print(\"should not reach here\")\n        \n# 단순 빈복문\nfor i in range(2,10):"
        }
      ],
      "id": "5cO3DrSF",
      "createdAt": 1698026772919,
      "updatedAt": 1698026803214
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "연사자",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "3 ** 4\t# 제곱 연산자\n>> 81\n\n7 / 4 # 1.75\n7 // 4 # 1"
        }
      ],
      "id": "Vy-pMLWM",
      "createdAt": 1698026814634,
      "updatedAt": 1698026843021
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "문자열",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "# 문자열 더하기\nhead = \"Python\"\ntail = \" is fun!\"\nhead + tail # 'Python is fun!'\n\n# 문자열 곱하기\na = \"python\"\na * 2 # 'pythonpython'\n\n# 문자열 길이 구하기\na = \"Life is too short\"\nlen(a) # 17\n\n# 문자열 인덱싱\na = \"Life is too short, You need Python\"\na[0] # 'L'\na[-1] # 'n' 뒤에서부터 가져옴\na[0:4] # 'Life' == a[:4]\n\n# 문자열 포매팅\n\"I eat %d apples.\" % 3 # 'I eat 3 apples.'\n# 그냥 %s로 해도 다 된다!\n\n# 향상된 포매팅\n\"I eat {0} apples\".format(3) # 'I eat 3 apples'\n\"I ate {0} apples. so I was sick for {1} days.\".format(number, day)\n\"I ate {number} apples. so I was sick for {day} days.\".format(number=10, day=3)\n# 'I ate 10 apples. so I was sick for three days.'\n\n# 문자 개수 세기\na = \"hobby\"\na.count('b') # 2\n\n# 위치 알려주기\na = \"Python is the best choice\"\na.find('b') # 14\na.find('k') # -1 존재하지 않을 경우\n\n# 문자열 삽입\n\",\".join('abcd') # 'a,b,c,d'\t== \",\".join(['a', 'b', 'c', 'd'])\n\n# 공백 지우기\na.strip()\n\n# 문자열 바꾸기\na = \"Life is too short\"\na.replace(\"Life\", \"Your leg\") # 'Your leg is too short'\n\n# 문자열 나누기\na = \"Life is too short\"\na.split() # ['Life', 'is', 'too', 'short']\nb = \"a:b:c:d\"\nb.split(':') # ['a', 'b', 'c', 'd']"
        }
      ],
      "id": "zqNJqlNJ",
      "createdAt": 1698026860122,
      "updatedAt": 1698026870660
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "배열",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "a = [1, 2, 3]\nb = [4, 5, 6]\na + b # [1, 2, 3, 4, 5, 6]\na * 3 # [1, 2, 3, 1, 2, 3, 1, 2, 3]\n\n# 길이 구하기\nlen(a) # 3\n\n# 요소 삭제\ndel a[1] # [1, 3]\ndel a[1:] # [1]\na = [1, 2, 3, 1, 2, 3]\na.remove(3)\t# [1, 2, 1, 2, 3] 3번째 삭제\n\n# 요소 추가\na.append(4) # [1, 2, 3, 4]\n\n# 요소 삽입\na.insert(0, 4) # [4, 1, 2, 3]\n\n# 요소 pop\na = [1,2,3]\na.pop() # 3\na # [1, 2]\na.pop(1) # 1\na # [2]\n\n# 정렬\n.sort() # 숫자 문자 정렬 가능\n.reverse() # 순서 뒤집기\n\n# 값 위치 찾기\na = [1,2,3]\na.index(3) # 2\n\n# 확장하기\na = [1,2,3]\na.extend([4,5]) # [1, 2, 3, 4, 5]\n\n# check if element exist in list using 'in'\nif 'at' in listOfStrings :\n    print(\"Yes, 'at' found in List : \" , listOfStrings)"
        }
      ],
      "id": "rfOY0zwh",
      "createdAt": 1698026900683,
      "updatedAt": 1698026908253
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "딕셔너리",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "a = {'name': 'pey', 'phone': '0119993323', 'birth': '1118'}\nlist(a.keys()) # ['name', 'phone', 'birth']\nfor k in a.keys(): \n  print(k)\n \na.values()\t# 값 리스트\n\n# 키 밸류 쌍 얻기\na.items() # [('name', 'pey'), ('phone', '0119993323'), ('birth', '1118')]\n\n# 전부 지우기\na.clear()"
        }
      ],
      "id": "_aRfhxr0",
      "createdAt": 1698026915831,
      "updatedAt": 1698026925470
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "함수",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "def add(a, b): \n    return a + b\n  \n# 입력값이 여러개일 경우\ndef add_many(*args): \n     result = 0 \n     for i in args: \n         result = result + i \n     return result \n  \n# 초기값 미리 설정하기 가능\ndef say_myself(name, old, man=True): \n \n# 함수 내에서 전역변수 사용하기\nresult = 0\ndef add(num):\n    global result\n    result += num\n    return result\n\nprint(add(3))\t# 3\nprint(add(4))\t# 7"
        }
      ],
      "id": "cj5ch5AS",
      "createdAt": 1698026935346,
      "updatedAt": 1698026941929
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "클래스",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "class FourCal:\n  def setdata(self, first, second):\n    self.first = first\n    self.second = second\n    \n  def add(self):\n    result = self.first + self.second\n    return result\n  \na = FourCal()\na.setdata(4, 2)\nprint(a.add()) # 6\n\n# 여기서 객체를 생성한 다음에 바로 setdata없이 add를 호출하게 되면 에러가 발생한다\n# 생성자를 추가하면 해결된다\ndef __init__(self, first, second):\n  self.first = first\n  self.second = second\n  \n# 클래스 상속\nclass MoreFourCal(FourCal):"
        }
      ],
      "id": "itdDNQ9a",
      "createdAt": 1698026948059,
      "updatedAt": 1698026954392
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "모듈화",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "# mod1.py ################################\ndef add(a, b):\n    return a + b\n\ndef sub(a, b): \n    return a-b\n  \n##########################################\n\nfrom mod1 import add, sub\t# 이렇게하면 모듈 이름없이 바로 접근할 수 있다.\nfrom mod1 import *\nadd(3, 4) # 7\n\n# if __name__ == \"__main__\" 을 사용하면 해당 모듈을 직접 실행할때만 타게된다"
        }
      ],
      "id": "akAn-vCv",
      "createdAt": 1698027000713,
      "updatedAt": 1698027007275
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Btz7BEVz",
      "tagsIds": [],
      "description": null,
      "name": "Scheduler",
      "content": [
        {
          "label": "Fragment 1",
          "language": "python",
          "value": "import schedule \nimport time \ndef job_second(): \n    print(\"I'm working...every second\") \n    \ndef job_minute(): \n    print(\"I'm working...every minute\") \n    \ndef job_hour(): \n    print(\"I'm working...every hour\") \n    \ndef job_day(): \n    print(\"I'm working...every day\") \n    \ndef job_monday(): \n    print(\"I'm working...every monday\") \n    \ndef job_wednesday(): \n    print(\"I'm working...every wednesday\") \n    \n# # 10초에 한번씩 실행 \nschedule.every(10).seconds.do(job_second) \n\n# # 10분에 한번씩 실행 \nschedule.every(10).minutes.do(job_minute) \n\n# # 매 시간 실행 \nschedule.every().hours.do(job_hour) \n\n# # 매일 10:30 에 실행 \nschedule.every().days.at(\"10:30\").do(job_day) \n\n# # 매주 월요일 실행 \nschedule.every().monday.do(job_monday) \n\n# # 매주 수요일 13:15 에 실행 \nschedule.every().wednesday.at(\"13:15\").do(job_wednesday) \n\nwhile True: \n    schedule.run_pending() \n    time.sleep(1)"
        }
      ],
      "id": "1adAZRES",
      "createdAt": 1698027016442,
      "updatedAt": 1698027030891
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "6Xpe1L2B",
      "tagsIds": [],
      "description": null,
      "name": "Type",
      "content": [
        {
          "label": "Fragment 1",
          "language": "typescript",
          "value": "// number\nconst integer: number = 1;\n\n// string\nconst myName: string = 'Lee Jin';\n\n// boolean\nconst isTypeScriptAwesome: boolean = true;\n\n// array\nconst myArray: Array<number> = [1, 2 ,3, 4, 5, 6];\nconst myArray2: number[] = [1, 2, 3, 4, 5, 6];\n\n// 튜플 - 튜플 타입 변수는 정확히 명시된 개수 만큼의 원소만을 가질 수 있다.\nconst myArray3: [string, number] = ['홍길동', 145];\n\n// 사용자 정의 타입\ntype Human = {\n    name: string;\n    age: number;\n    address?: string; // ?는 해당 속성이 존재하지 않을 수도 있다는 것을 명시\n};"
        }
      ],
      "id": "WDa-FBaB",
      "createdAt": 1698027170848,
      "updatedAt": 1698027226112
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "6Xpe1L2B",
      "tagsIds": [],
      "description": null,
      "name": "인터페이스",
      "content": [
        {
          "label": "Fragment 1",
          "language": "typescript",
          "value": "interface Life {\n  name: string;\n  readonly sex: string; // 읽기 전용 속성\n  weight?: number; // 선택 속성 \n}\n\nconst cat: Life = { name: '길냥이', sex: 'male' }; // ok\n\n// error TS2540: Cannot assign to 'sex' because it is a constant or a read-only property.\ncat.sex = 'female';\n\ninterface GetLife {\n    (uuid: UUID): Life;\n}\n\nconst getLife: GetLife = function (u) {\n    const dog: Life = { name: '홍길동', sex: 'female', weight: 30 };\n    return dog;\n}"
        }
      ],
      "id": "4m3uAM6y",
      "createdAt": 1698027243335,
      "updatedAt": 1698027260609
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "6Xpe1L2B",
      "tagsIds": [],
      "description": null,
      "name": "클래스",
      "content": [
        {
          "label": "Fragment 1",
          "language": "typescript",
          "value": "class Base {\n    static num: number = 0; // 스태틱 변수\n    \n    // 스태틱 메소드\n    static incrementNum() {\n        Base.num += 1;\n    }\n\n    baseProps: number; // 클래스 변수\n    \n    // 생성자\n    constructor() {\n        this.baseProps = 123;\n    }\n}\n\nclass MyCustom extends Base {\n    private extendsProps: number = 0;\n    constructor() {\n        super();\n        this.extendsProps = 456;\n    }\n}\n\nconst myCustom: MyCustom = new MyCustom();\nconsole.log(Base.num); // 0\n\nconsole.log(myCustom.baseProps); // 123\nconsole.log(myCustom.extendsProps) // 456"
        }
      ],
      "id": "207GFrsO",
      "createdAt": 1698027264400,
      "updatedAt": 1698027277492
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "6Xpe1L2B",
      "tagsIds": [],
      "description": null,
      "name": "for",
      "content": [
        {
          "label": "Fragment 1",
          "language": "typescript",
          "value": "let arr = [10, 20, 30, 40];\n\nfor (var val of arr) {\n  console.log(val); // prints values: 10, 20, 30, 40\n}\n\nfor (var index in arr) {\n  console.log(index); // prints indexes: 0, 1, 2, 3\n\n  console.log(arr[index]); // prints elements: 10, 20, 30, 40\n}"
        }
      ],
      "id": "ovTThpJ5",
      "createdAt": 1698027301000,
      "updatedAt": 1698027314144
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Vx9GQppL",
      "tagsIds": [],
      "description": null,
      "name": "총정리",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "# 제목 1\n## 제목 2\n### 제목 3\n#### 제목 4\n##### 제목 5\n###### 제목 6\n\n이텔릭체는 *별표(asterisks)* 혹은 _언더바(underscore)_를 사용하세요.\n두껍게는 **별표(asterisks)** 혹은 __언더바(underscore)__를 사용하세요.\n**_이텔릭체_와 두껍게**를 같이 사용할 수 있습니다.\n취소선은 ~~물결표시(tilde)~~를 사용하세요.\n<u>밑줄</u>은 `<u></u>`를 사용하세요.\n\n[GOOGLE](https://google.com)\n\n![대체 텍스트(alternative text)를 입력하세요!](http://www.gstatic.com/webp/gallery/5.jpg \"링크 설명(title)을 작성하세요.\")\n\n```bash\n$ vim ./~zshrc\n```\n\n> 남의 말이나 글에서 직접 또는 간접으로 따온 문장.\n> _(네이버 국어 사전)_\n\n***\n(Asterisks)"
        }
      ],
      "id": "zA1Uylnk",
      "createdAt": 1698138362992,
      "updatedAt": 1698138658615
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vhYiJDpn",
      "tagsIds": [],
      "description": null,
      "name": "Cuncurrency",
      "content": [
        {
          "label": "Fragment 1",
          "language": "swift",
          "value": "// 현재 task의 context에 의존적이지 않은 작업 생성\nTask.detached(priority: .background) {\n    await DirectoryCleaner.cleanup()\n}\n\n// 여러 작업 한번에 로딩하기\nfunc fetchThumbnails(for ids: [String]) async throws -> [String: UIImage] {\n    var thumbnails: [String: UIImage] = [:]\n    try await withThrowingTaskGroup(of: (String, UIImage).self) { group in\n        for id in ids {\n            group.async {\n            \t\t// 여기서 바로 thumbnails에 값 넣으면 안되는게\n                // 딕셔너리는 Sendable하지 않기 때문\n                return (id, try await fetchOneThumbnail(withID: id))\n            }\n        }\n\n        for try await (id, thumbnail) in group {\n            thumbnails[id] = thumbnail\n        }\n    }\n    return thumbnails\n}\n\n// 작업 캔슬시키기\nfunc collectionView(_ view: UICollectionView, \n                    willDisplay cell: UICollectionViewCell, \n                    forItemAt item: IndexPath) {\n    let ids = getThumbnailIDs(for: item)\n    thumbnailTasks[item] = Task {\n        defer { thumbnailTasks[item] = nil }\n        let thumbnails = await fetchThumbnails(for: ids)\n        display(thumbnails, in: cell)\n    }\n}\n\nfunc collectionView(_ view: UICollectionView, \n                    didEndDisplay cell: UICollectionViewCell, \n                    forItemAt item: IndexPath) {\n    thumbnailTasks[item]?.cancel()\n}"
        }
      ],
      "id": "3E7QPvZV",
      "createdAt": 1698459863901,
      "updatedAt": 1730733795521
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vhYiJDpn",
      "tagsIds": [],
      "description": null,
      "name": "SwiftUI",
      "content": [
        {
          "label": "Fragment 1",
          "language": "swift",
          "value": "https://www.swiftuifieldguide.com/\n\nGroupBox\n\n// 인스타 느낌 배열\nLazyVGrid\n\n// GeometryReader로 뷰 크기 디버깅하기\nText(\"Hello, world. This is a longer text.\")\n    .overlay {\n        GeometryReader { proxy in\n            Text(\n                \"\\(proxy.size.width) x \\(proxy.size.height)\"\n            )\n                .font(.caption)\n                .foregroundStyle(.white)\n                .padding(4)\n                .background { Color.purple }\n                .fixedSize()\n                .frame(width: proxy.size.width,\n                       height: proxy.size.height)\n        }\n    }\n \n // alignmentGuide로 정렬 세부 조정하기\n.overlay(alignment: .topTrailing) {\n        MyBadge()\n            .alignmentGuide(.top) { dim in\n                dim.height / 2\n            }\n            .alignmentGuide(.trailing) { dim in\n                dim.width / 2\n            }\n    }\n    \n// Custom Shapes\nstruct Checkmark: Shape {\n  func path(in rect: CGRect) -> Path {\n    Path { p in\n      p.move(to: .init(x: rect.minX, y: rect.midY))\n      p.addLine(to: .init(x: rect.minX + rect.size.width / 2, y: rect.maxY))\n      p.addLine(to: .init(x: rect.maxX, y: rect.minY))\n    }\n  }\n  \n  func sizeThatFits(_ proposal: ProposedViewSize) -> CGSize {\n    let p = proposal.replacingUnspecifiedDimensions()\n    let length = min(p.width, p.height)\n    return .init(width: length, height: length)\n  }\n}"
        }
      ],
      "id": "PY2kWa7L",
      "createdAt": 1698459912424,
      "updatedAt": 1735017027288
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "ERD",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "```mermaid\nerDiagram\n    <!-- 관계 -->\n    PRODUCT ||--|{ BARCODE : \"product_id(DELETE CASCADE)\"\n    PRODUCT ||--|{ NOTE : \"product_id\"\n    PRODUCT ||--|{ FAVORITE : \"product_id(DELETE CASCADE)\"\n    PRODUCT ||--|{ PRODUCT_IMAGE : \"product_id(DELETE CASCADE)\"\n    \n    USER ||--|{ FAVORITE : user_id\n    USER ||--|{ NOTE : user_id\n    \n    NOTE ||--|{ PRODUCT_IMAGE : note_id\n\n\t\t<!-- 테이블 -->\n    PRODUCT {\n        uuid id PK\n        string name\n        int type\n    }\n    \n    BARCODE {\n        uuid id PK\n        uuid product_id PK\n        string barcode_id\n    }\n    \n    NOTE {\n        uuid id PK\n        uuid user_id\n\t\t\t\tuuid product_id\n        string body\n        date registered\n    }\n    \n    USER {\n  \t\t\tuuid user_id PK\n        string sub\n  \t\t\tstring nick_name\n    }\n\n    FAVORITE {\n    \t\tuuid id PK\n    \t\tuuid product_id\n  \t\t\tuuid user_id\n    }\n    \n    PRODUCT_IMAGE {\n    \t\tuuid id PK\n        uuid product_id\n        uuid note_id\n        uuid user_id\n    }\n```"
        }
      ],
      "id": "1SK7IU5F",
      "createdAt": 1698460168612,
      "updatedAt": 1728785608562
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "Vx9GQppL",
      "tagsIds": [],
      "description": null,
      "name": "Mermaid",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "[Mermaid Intro](http://mermaid.js.org/intro/)\n\n## classDiagram Ex\n```mermaid\nclassDiagram\nClass01 <|-- AveryLongClass : Cool\nClass03 *-- Class04\nClass05 o-- Class06\nClass07 .. Class08\nClass09 --> C2 : Where am i?\nClass09 --* C3\nClass09 --|> Class07\nClass07 : equals()\nClass07 : Object[] elementData\nClass01 : size()\nClass01 : int chimp\nClass01 : int gorilla\nClass08 <--> C2: Cool label\n```"
        }
      ],
      "id": "qazQh5bo",
      "createdAt": 1698460492515,
      "updatedAt": 1698460583321
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "Foundation",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "https://tourofrust.com/\nhttps://www.slideshare.net/slideshow/momenti-seminar-a-tour-of-rust-part-1/250379437\nhttps://www.slideshare.net/utilforever/momenti-seminar-a-tour-of-rust-part-2\n\n// 기본 개념\nlet mut(mutable) 넣으면 변경 가능한 값\n없으면 기본적으로 read-only\n\nconst PI: f32 = 3.14159;\t// 상수\n\nconst vs static\nstatic은 런타임에 할당됨, 그리고 값 변경 가능\n\n// 자료형\n부울 값 - 참/거짓 값을 나타내는 bool\n부호가 없는 정수형 - 양의 정수를 나타내는 u8 u16 u32 u64 u128\n부호가 있는 정수형 - 양/음의 정수를 나타내는 i8 i16 i32 i64 i128\n포인터 사이즈 정수 - 메모리에 있는 값들의 인덱스와 크기를 나타내는 usize isize\n부동 소수점 - f32 f64\n튜플(tuple) - stack에 있는 값들의 고정된 순서를 전달하기 위한 (값, 값, ...)\n배열(array) - 컴파일 타임에 정해진 길이를 갖는 유사한 원소들의 모음(collection)인 [값, 값, ...]\n슬라이스(slice) - 런타임에 길이가 정해지는 유사한 원소들의 collection\nstr(문자열 slice) - 런타임에 길이가 정해지는 텍스트\nString - 문자열, str과 다름, 다양한 메서드 제공\n\nlet c = 4.3f32; // 이런식으로 숫자 뒤에 자료형을 붙여 표현 가능\n\n// 자료형 변환\nlet a = 13u8;\nlet b = 7u32;\nlet c = a as u32 + b;\n\nlet a = 42;\nlet a_string = a.to_string();\nlet b = a_string.parse::<i32>()?;\n\n// String\nlet s = String::from(\"Hello\");\nlet slice: &str = &s;  // `String`에서 `&str`로 슬라이스를 생성\nslice.to_string()\t// 다시 슬라이스로 변환\n// r#으로 시작해서 #으로 끝나면 원시 문자열\nlet a: &'static str = r#\"\n        <div class=\"advice\">\n            원시 문자열은 일부 상황에서 유용합니다.\n        </div>\n        \"#;\n// slice\nlet first_word = &a[0..2];\n// 인터폴레이션\nformat!(\"Hello, my name is {} and I am {} years old.\", name, age);\n\n#[derive(Debug)]를 사용하면 아래 사용 가능\nprintln!(\"{:?}\", user);   // ✅ 기본 Debug 출력\nprintln!(\"{:#?}\", user);  // ✅ Pretty Print (보기 좋게 출력)\n\n// String과 &str 차이\nString\n소유권\t데이터를 소유함 (Heap에 저장)\t\n메모리 위치: Heap\t\n가변성: 변경 가능 (push, push_str)\t\n사용 사례: 가변적인 문자열이 필요할 때\n\n&str\n데이터를 소유하지 않음 (Stack에 저장된 문자열 참조)\n메모리 위치: Stack 또는 Heap 내부의 일부\n가변성: 변경 불가능 (Immutable)\n사용 사례: 함수 인자로 문자열을 전달할 때 (왜냐하면 String으로 전달하면 메모리 낭비)\n\n// Array\nlet mut array: [i32; 3] = [0; 3];\t// i32는 원소의 자료형, 3은 컴파일 타임에 주어지는 고정된 길이\n\narray[1] = 1;\narray[2] = 2;\n\nassert_eq!([1, 2], &array[1..]);\n\n// 가변 어레이(Vector)\nlet mut i32_vec = Vec::<i32>::new(); \ni32_vec.push(1);\ni32_vec.push(2);\n// or\nlet i32_vec = vec![i32::from(1), i32::from(2)];\nfor word in i32_vec.iter() {\n\tprintln!(\"{}\", word);\n}\n\n// 함수\nfn swap(x: i32, y: i32) -> (i32, i32) {\n    return (y, x);\n}\n\n// 블록 표현\nlet result = match food {\n        \"핫도그\" => \"핫도그다\",\n        // 리턴문 하나 뿐이라면 중괄호는 필수가 아님\n        _ => \"핫도그가 아니다\",\n    };\n\nlet v = {\n  // 이 범위 블록은 함수 범위를 더럽히지 않고 값을 가져오게 해준다\n  let a = 1;\n  let b = 2;\n  a + b\n};\n\n스태틱 메소드(static methods) - 자료형 그 자체에 속하는 메소드로서, :: 연산자를 이용하여 호출함.\nlet s = String::from(\"Hello world!\");\n\n인스턴스 메소드(instance methods) - 자료형의 인스턴스에 속하는 메소드로서, . 연산자를 이용하여 호출함.\nprintln!(\"{}의 글자 수는 {}입니다.\", s, s.len());\n\n// 소유권 대여하기\nlet f = &foo;\nlet f = &mut foo;\t// foo가 mutable하다면\nlet bar = *f; // owner의 값의 복사본을 가져옴\n*f = 13; // 참조의 owner의 값을 설정함\n\nlet a: &'static str = \"hi 🦀\";\t// static 선언하기\n\n// Box\nBox는 stack에 있는 데이터를 heap으로 옮길 수 있게 해주는 데이터 구조입니다.\nBox는 smart pointer로도 알려진 struct이며 heap에 있는 데이터를 가리키는 포인터를 들고 있습니다."
        }
      ],
      "id": "gIOH9xzE",
      "createdAt": 1715057458775,
      "updatedAt": 1742472078247
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "Struct Trait",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "//trait 인터페이스\ntrait SpecialType {\n    fn do_special_work(&mut self) -> String;\n    fn dump(&self);\n}\n\n// 구조체\nstruct SomeGoodSpecial {\n    name: String,\n}\n\n// 튜플형 구조체\nstruct Location(i32, i32);\nlet loc = Location(42, 32);\nprintln!(\"{}, {}\", loc.0, loc.1);\n\n// 제네릭\nstruct BagOfHolding<T> {\n    item: T,\n}\nlet i32_bag = BagOfHolding::<i32> { item: 42 };\n\nfn generic_make_noise<T>(creature: &T) where T: NoiseMaker, {\n    // 컴파일 타임에 실제 자료형을 알게 됩니다\n    creature.make_noise();\n}\n// 위 제네릭 함수를 줄여쓰기\nfn generic_make_noise(creature: &impl NoiseMaker) {\n    // 컴파일 타임에 실제 자료형을 알게 됩니다\n    creature.make_noise();\n}\n\n// 익스텐션 같은 쓰임\nimpl SpecialType for SomeGoodSpecial {\n    fn do_special_work(&mut self) -> String {\n        self.name.push_str(\" Worker\");\n        String::from(format!(\"{}\", self.name))\n    }\n\n    fn dump(&self) {\n        println!(\"Current my name is {}\", self.name);\n    }\n}"
        }
      ],
      "id": "Y0I0Ik5I",
      "createdAt": 1715069217527,
      "updatedAt": 1737682987408
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "API",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "# 공통 규칙\n## common header\n```json\n{\"authorization\": \"Bearer ACCESS_TOKEN\"}\n```\n## common response model\n```json\n// success\n{\n\t\"result\": true,\n\t\"data\": data model\n}\n\n// fail\n{\n\t\"result\": false,\n\t\"error\": {\n\t\t\"code\": 9999,\n\t\t\"msg\": \"unknown\"\n\t}\n}\n```\n\n# users\n## post\n### path: users/\n#### body\n```json\n{\"sub\": \"auth0 sub\" \"nick_name\": \"name\"}\n```\n#### response data\n- User model\n\n## get\n### path: users/\n#### response data\n```json\n{\"users\": [User model]}\n```\n\n### path: users/:id\n#### response data\n- User model\n\n### path: users/me\n#### response data\n- User model\n\n### path: users/search\n#### query\n- nick_name\n#### response data\n```json\n{\"users\": [User model]}\n```\n\n### path: users/favorites\n#### response data\n```json\n{\"product_ids\": Product Id Array}\n```\n\n## put\n### path: users/me\n#### body\n```json\n{\"nick_name\": \"nick name\"}\n```\n\n## delete\n### path: users/me\n#### response data\n- null\n\n# products\n## post\n### path: products/\n#### body\n```json\n{\"name\": \"product name\",\n\"type\": 1,\n\"barcode_id\": optional}\n```\n#### response data\n- Product model\n\n## get\n### path: products/:id\n#### response data\n```json\n{\"product\": Product model,\n\"images\": [ProductImage id],\n\"favorite_count\": count}\n```\n\n### path: products/barcode/:barcode_id\n#### response data\n```json\n{\"product\": Product model,\n\"images\": [ProductImage id],\n\"favorite_count\": count}\n```\n\n### path: products/\n#### query\n- page\n- per\n- name(optional)\n#### response data\n```json\n{\"products\": [\n  {\"product\": Product model,\n  \"images\": [ProductImage id(최대 3개)]}\n]}\n```\n\n## put\n## delete\n### path: products/:id(안씀)\n#### response data\n- null\n\n# notes\n## post\n### path: notes/\n#### body\n```json\n{\"product_id\": \"product_id\",\n\"body\": \"body\",\n\"image_ids\": [ProductImage id]}\n```\n#### response data\n- Note model\n\n## get\n### path: notes/:id\n#### response data\n```json\n{\"note\": Note model,\n\"product\": Product model,\n\"user\": User model(Optional),\n\"images\": [ProductImage id]}\n```\n\n### path: notes/\n#### query\n- page\n- per\n- product_id(optional)\n#### response data\n```json\n{\"notes\": [\n  {\"note\": Note model,\n  \"product\": Product model,\n  \"user\": User model(Optional),\n  \"images\": [ProductImage id](최대 3개)}\n]}\n```\n\n### path: notes/user/:id\n#### query\n- page\n- per\n#### response data\n```json\n{\"notes\": [\n  {\"note\": Note model,\n  \"product\": Product model,\n  \"user\": User model(Optional),\n  \"images\": [ProductImage id](최대 3개)}\n]}\n```\n\n## put\n### path: notes/:id\n#### body\n- Note model\n\n## delete\n### path: notes/:id\n#### response data\n- null\n\n# images\n## post\n### path: images/\n#### body\n```json\n{\"product_id\": product_id(Optional)\n\"note_id\": note_id(Optional)}\n```\n#### response data\n- ProductImage model\n\n## delete\n### path: images/:id\n#### response data\n- null"
        }
      ],
      "id": "TNLZBaE9",
      "createdAt": 1726580854639,
      "updatedAt": 1746519343016
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "Untitled snippet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": ""
        }
      ],
      "id": "-NJfntp1",
      "createdAt": 1726584274937,
      "updatedAt": 1726584298366
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "",
      "tagsIds": [],
      "description": null,
      "name": "TODO",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "- products 핸들러 개발\n- notes 핸들러 개발\n- images 스태틱 서버 개발 및 핸들러 개발\n\nhttps://youtu.be/l7eut-nYIUc\n- contentUnavailableView\n- symbol effect\n\n\nhttps://youtu.be/LaimspStHzk\n- 커스텀 얼럿\n\nhttps://youtu.be/4dbnfyXILc4\n- 다크모드 버튼\n\n@Observable\n- iOS17에서 등장한 ui data flow 기법\n\nTipKit 사용해보기\n- 도네 요구하기\n\n컨트롤센터에 바코드찍기 바로가기 만들기"
        }
      ],
      "id": "ltPExcke",
      "createdAt": 1726808499416,
      "updatedAt": 1746507298768
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vhYiJDpn",
      "tagsIds": [],
      "description": null,
      "name": "Testing",
      "content": [
        {
          "label": "Fragment 1",
          "language": "swift",
          "value": "/* \nhttps://developer.apple.com/videos/play/wwdc2024/10179/\nhttps://developer.apple.com/documentation/testing/migratingfromxctest\n기존 유닛 테스트와의 차별점\n1. validation에 관한 결과가 더 디테일해짐\n2. 테스트 함수들이 좀 더 사용하기 유연해짐(더 간편해짐)\n3. 기존에 못하던 것이 가능해짐\n- 테스트 중도 중지\n- 테스트 순차적 진행\n*/\n\n\n// 테스트 메서드 생성\n@Test(\"이 문구는 테스트 네비게이터에 나와\") func gogoTest() {\n\t// Validate\n\t#expect([1, 2, 3].count == 3)\n  \n  // #expect와 다른점은 테스트 중도 중지\n  #require([1, 2, 3].count == 3)\n}\n\n// 테스트 함수 선언은 여러 방식으로 가능함\n@Test(.bug(\"example.com/issue/999\", \"title\"))\n@Test(.tags(.critical))\n@Test(.enabled(if: true))\n@Test(.timeLimit(.minutes(3))\n@Test(.arguments: [\"aaa\", \"bbb\"])\n@Suite(.serialized)\t// 그룹에 이용됨\n\n// 로그 기록\nIssue.record(\"Engine is not electric\")\n\n// 테스트 그룹\nstruct TestGroup01 {\n\t@Test func testA {}\n}\n\n// 클로저 함수 대기\nawait confirmation(\"…\") { soldFood in\n    FoodTruck.shared.eventHandler = { event in\n        if case .soldFood = event {\n        \tsoldFood()\n        }\n    }\n\tawait Customer().buy(.soup)\n}"
        }
      ],
      "id": "OR0VIob3",
      "createdAt": 1729662350399,
      "updatedAt": 1730013517000
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vhYiJDpn",
      "tagsIds": [],
      "description": null,
      "name": "ShortCut",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "Cmd+Opt+/ = 주석 빨리치기"
        }
      ],
      "id": "ourjs4Sn",
      "createdAt": 1730727414509,
      "updatedAt": 1730727492862
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vhYiJDpn",
      "tagsIds": [],
      "description": null,
      "name": "TCA",
      "content": [
        {
          "label": "Fragment 1",
          "language": "swift",
          "value": "https://pointfreeco.github.io/swift-composable-architecture/main/tutorials/composablearchitecture/02-01-yourfirstpresentation\n\n// Debug\nstatic let store = Store(initialState: CounterFeature.State()) {\n  CounterFeature()\n  \t._printChanges()\t// Action 호출과 State 변경사항이 로그로 찍히게됨\n}\n\n///CounterFeature.swift\nimport ComposableArchitecture\n\n@Reducer\nstruct CounterFeature {\n  @ObservableState\n  struct State {\n  \t@Presents var alert: AlertState<Action.Alert>?\n    var count = 0\n    var fact: String?\n    var isLoading = false\n    var isTimerRunning = false\n  }\n  \n  enum Action {\n    case decrementButtonTapped\n    case factButtonTapped\n    case factResponse(String)\n    case incrementButtonTapped\n    case timerTick\n    case toggleTimerButtonTapped\n  }\n  \n  enum CancelID { case timer }\n  @Dependency(\\.dismiss) var dismiss\t// 이런 의존성을 가지는 것도 가능\n  \n  var body: some ReducerOf<Self> {\n    Reduce { state, action in\n      switch action {\n      case .decrementButtonTapped:\n        state.count -= 1\n        state.fact = nil\n        return .none\n        \n      case .factButtonTapped:\n        state.fact = nil\n        state.isLoading = true\n        return .run { [count = state.count] send in\t// 비동기 작업일 경우 .run 사용\n          let (data, _) = try await URLSession.shared\n            .data(from: URL(string: \"http://numbersapi.com/\\(count)\")!)\n          let fact = String(decoding: data, as: UTF8.self)\n          await send(.factResponse(fact))\t// 여기서 바로 state를 수정하면 안됨. Action을 이용하여 처리\n        }\n        \n      case let .factResponse(fact):\n        state.fact = fact\n        state.isLoading = false\n        return .none\n        \n      case .incrementButtonTapped:\n        state.count += 1\n        state.fact = nil\n        return .none\n        \n      case .timerTick:\n        state.count += 1\n        state.fact = nil\n        return .none\n        \n      case .toggleTimerButtonTapped:\n        state.isTimerRunning.toggle()\n        if state.isTimerRunning {\n          return .run { send in\n            while true {\n              try await Task.sleep(for: .seconds(1))\n              await send(.timerTick)\n            }\n          }\n          .cancellable(id: CancelID.timer)\n        } else {\n          return .cancel(id: CancelID.timer)\n        }\n      }\n    }\n    .ifLet(\\.$alert, action: \\.alert) // 해당 값이 없다면 리듀서 작동함\n  }\n}\n\n// Testing\nimport ComposableArchitecture\nimport Testing\n@testable import CounterApp\n\n@MainActor\nstruct CounterFeatureTests {\n  @Test\n  func basics() async {\n    let store = TestStore(initialState: CounterFeature.State()) {\n      CounterFeature()\n    }\n    \n    await store.send(.incrementButtonTapped) {\n      $0.count = 1\t// 예상값을 체크한다.\n    }\n    await store.send(.decrementButtonTapped) {\n      $0.count = 0\n    }\n  }\n}\n\n// 비동기 기능 테스트하기\n@MainActor\nstruct CounterFeatureTests {\n  @Test\n  func numberFact() async {\n    let store = TestStore(initialState: CounterFeature.State()) {\n      CounterFeature()\n    }\n\n    await store.send(.factButtonTapped) {\n      $0.isLoading = true\n    }\n    await store.receive(\\.factResponse, timeout: .seconds(1)) {\n      $0.isLoading = false\n      $0.fact = \"???\"\n\t\t}\n  }\n}\n\n\n@CasePathable ???\n\n// 리듀서에서 alert 사용하기\nstruct State: Equatable {\n\t@Presents var alert: AlertState<Action.Alert>?\n}\nenum Action {\n  case alert(PresentationAction<Alert>)\n  enum Alert: Equatable {\t// 얼럿의 액션에 대한 구현은 여기에\n  \tcase confirmDeletion(id: Contact.ID)\n  }\n}\n\n// 리듀서로 페이지 이동하기\nextension ContactsFeature {\n  @Reducer\n  enum Destination {\n    case addContact(AddContactFeature)\n    case alert(AlertState<ContactsFeature.Action.Alert>)\n  }\n}\nextension ContactsFeature.Destination.State: Equatable {}\n\n@ObservableState\nstruct State: Equatable {\n  @Presents var destination: Destination.State?\n  var path = StackState<ContactDetailFeature.State>()\t// 리듀서로 네비게이션스택 이용하기\n}\nenum Action {\n  case destination(PresentationAction<Destination.Action>)\n}\n"
        }
      ],
      "id": "pPL5RtTE",
      "createdAt": 1730102384061,
      "updatedAt": 1732093140750
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vhYiJDpn",
      "tagsIds": [],
      "description": null,
      "name": "OBJ-C Snipet",
      "content": [
        {
          "label": "Fragment 1",
          "language": "objectivec",
          "value": "// 시작 시간 기록\nNSDate *startTime = [NSDate date];\n\n// 끝 시간 기록\nNSDate *endTime = [NSDate date];\n\n// 밀리세컨드로 시간 차이 계산\nNSTimeInterval timeInterval = [endTime timeIntervalSinceDate:startTime];\nNSLog(@\"Elapsed time: %.3f milliseconds\", timeInterval * 1000);"
        }
      ],
      "id": "0C6eAfry",
      "createdAt": 1733123521703,
      "updatedAt": 1733123604206
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "반복문",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "// 반복문\n// This loop prints: 0 1 2\nfor x in array {\n    print!(\"{x} \");\n}\n\nfor x in 0..5 {\n\tprintln!(\"{}\", x);\n}\n\nfor x in 0..=5 {\n\tprintln!(\"{}\", x);\n}\n\nloop {\n  x += 1;\n  if x == 2 {\n  \tbreak;\n  }\n}\n\n// loop에서 값 리턴하기\nlet v = loop {\n        x += 1;\n        if x == 13 {\n            break \"13 찾았다\";\n        }\n    };\n\nwhile x != 2 {\n\tx += 1;\n}"
        }
      ],
      "id": "EXNae0bM",
      "createdAt": 1737453674757,
      "updatedAt": 1739510248337
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "조건문",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "let x = 42;\n\nmatch x {\n  0 => {\n  \tprintln!(\"0 발견\");\n  }\n  // 여러 개 값과 대조할 수 있다\n  1 | 2 => {\n  \tprintln!(\"1 또는 2 발견!\");\n  }\n  // 범위로 대조할 수 있다\n  3..=9 => {\n  \tprintln!(\"3에서 9까지의 숫자 발견\");\n  }\n  // 찾은 숫자를 변수에 바인딩할 수 있다\n  matched_num @ 10..=100 => {\n  \tprintln!(\"10에서 100까지의 숫자 {} 발견!\", matched_num);\n  }\n  // 모든 케이스가 처리되지 않았을 경우 반드시 존재해야 하는 기본 match\n  _ => {\n  \tprintln!(\"뭔가 다른거 발견!\");\n  }\n}\n\n// enum\nenum Species {\n    Crab,\n    Octopus,\n    Fish,\n    Clam,\n}\nenum PoisonType {\n    Acidic,\n    Painful,\n    Lethal,\n}\nenum Size {\n    Big,\n    Small,\n}\nenum Weapon {\n    Claw(i32, Size),\n    Poison(PoisonType),\n    None,\n}\n\nstruct SeaCreature {\n    species: Species,\n    name: String,\n    arms: i32,\n    legs: i32,\n    weapon: Weapon,\n}\n\n// SeaCreature의 데이터는 stack에 있음\nlet ferris = SeaCreature {\n  // String struct도 stack에 있지만,\n  // heap에 있는 데이터에 대한 참조를 갖고 있음\n  species: Species::Crab,\n  name: String::from(\"Ferris\"),\n  arms: 2,\n  legs: 4,\n  weapon: Weapon::Claw(2, Size::Small),\n};\n\nmatch ferris.species {\n  Species::Crab => match ferris.weapon {\n    Weapon::Claw(num_claws, size) => {\n    \tlet size_description = match size {\n        Size::Big => \"큰\",\n        Size::Small => \"작은\",\n      };\n      println!(\n        \"ferris는 {}개의 {} 집게를 가진 게이다\",\n        num_claws, size_description\n      )\n    }\t\n    _ => println!(\"ferris는 다른 무기를 가진 게이다\"),\n\t},\n\t_ => println!(\"ferris는 다른 동물이다\"),\n}\n\n// 3항 연산 표현\nlet v = if x < 42 { -1 } else { 1 };"
        }
      ],
      "id": "PzMhY2xa",
      "createdAt": 1737453778420,
      "updatedAt": 1737454861888
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "ETC",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "#![allow(dead_code)] // 이 줄은 컴파일러 경고를 방지해줌\n\n// nullable 표현하기\nstruct BagOfHolding {\n    item: Option<T>,\n}\n\n// 결과 표현하기\nfn do_something_that_might_fail(i: i32) -> Result<f32, String> {\n    if i == 42 {\n        Ok(13.0)\n    } else {\n        Err(String::from(\"맞는 숫자가 아닙니다\"))\n    }\n}\n\nfn main() -> Result<(), String> {\n\t\t//아래것과 같은 동작\n    match do_something_that_might_fail() {\n        Ok(v) => println!(\"{} 발견\", v),\n        Err(e) => return Err(e),\n    }\n    // 얼마나 코드를 줄였는지 보세요!\n    let v = do_something_that_might_fail(42)?;\n    println!(\"{} 발견\", v);\n    Ok(())\n    // 이것두!\n    do_something_that_might_fail(42).ok_or(\"fail\")\n}\n\n// 파일에서 문자열 가져오기\nlet 00_html = include_str!(\"00_ko.html\");\n\n// 스마트 포인터\nBox<T>\t힙 메모리에 데이터를 저장하는 단순한 스마트 포인터\nRc<T>\t여러 개의 소유자를 가질 수 있는 참조 카운팅(Reference Counting) 스마트 포인터 (단일 스레드용)\t// 주로 다음과같이 사용: Rc<Vec<Foo>>\nArc<T>\t멀티 스레드 환경에서 안전하게 사용할 수 있는 원자적 참조 카운팅(Atomic Reference Counting)\nRefCell<T>\t내부 가변성을 제공하는 스마트 포인터 (런타임에 가변성 체크) (mut는 단일 소유자지만 이건 여러 소유자 가능)\t// 주로 다음과같이 사용: Rc<RefCell<Foo>>\nMutex<T>\t멀티 스레드에서 데이터를 안전하게 보호하는 락(lock) 기반 동기화 스마트 포인터\t// 주로 다음과같이 사용: Arc<Mutex<Foo>>\nRwLock<T>: 여러 스레드가 읽기 가능, 한 스레드만 쓰기 가능 (Mutex<T>는 한 번에 하나의 스레드만 데이터를 읽거나 쓸 수 있음.)\n\nMutex\t// 쓰레드간 자원 독점 사용\nlet mutex_pie = Mutex::new(Pie);\n// 파이에 대한 잠겨있는 immutable한 참조를 빌려봅시다\n// lock은 실패할 수도 있기 때문에 그 결과는 unwrap 해야합니다\nlet ref_pie = mutex_pie.lock().unwrap();\nref_pie.eat();"
        }
      ],
      "id": "JLhDyde9",
      "createdAt": 1737454571967,
      "updatedAt": 1738313131208
    },
    {
      "isDeleted": true,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "라이브러리 작성하기",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "library는 lib.rs라 불리는 파일에 root module을 갖고 있습니다.\n\n// 이 macro는 Rust가 테스트 모드가 아닐 경우\n// 이 inline module을 제거합니다.\n#[cfg(test)]\nmod tests {\n    // 부모 module에 즉시 접근이 가능하지 않다는 데에 주의하세요.\n    // 반드시 명시적으로 써줘야 합니다.\n    use super::*;\n\n    ... tests go here ...\n}\n\n// 내부 모듈 참조하기\ncrate - root module\nsuper - 현재 module의 부모 module\nself - 현재 module\n\n"
        }
      ],
      "id": "TdeRy_EO",
      "createdAt": 1738303592238,
      "updatedAt": 1742101430942
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "uniFFI",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "https://mozilla.github.io/uniffi-rs/latest/Getting_started.html"
        }
      ],
      "id": "02OnSP4H",
      "createdAt": 1738310218722,
      "updatedAt": 1738310859484
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "amHWqhN6",
      "tagsIds": [],
      "description": null,
      "name": "Foundation",
      "content": [
        {
          "label": "Fragment 1",
          "language": "c_cpp",
          "value": "enum class EType : uint8\n{\n\tType1 = 1,\n\tType2\n};\n\n// 싱글톤 함수 만들기\nclass FEditorStyle\n{\npublic:\n    static TSharedPtr<FEditorStyle> Get()\n    {\n        if (!Singleton.IsValid())\n        {\n            Singleton = MakeShareable(new FEditorStyle());\n        }\n        return Singleton;\n    }\n\nprivate:\n    static TSharedPtr<FEditorStyle> Singleton;\n};\n"
        }
      ],
      "id": "3hQkhzl4",
      "createdAt": 1738891302587,
      "updatedAt": 1742349834532
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "amHWqhN6",
      "tagsIds": [],
      "description": null,
      "name": "Unreal Foundation",
      "content": [
        {
          "label": "Fragment 1",
          "language": "c_cpp",
          "value": "// 중요 팁\n앞에 U가 붙은 오브젝트는 언리얼 메모리 체계로 관리되어야함으로 @UPROPERTY 필수\narray나 map에 u오브젝트가 있어도 넣어야함\n\n// 로그\nUE_LOG(LogTemp, Warning, TEXT(\"워닝 로그야~\"));\n\n// 다이얼로그\nFMessageDialog::Open(EAppMsgType::Ok, LOCTEXT(\"ToolCommand\", \"Action 1 Message\"));\n\n// 코드 상세 로그\n#define ED_LOG_CALLINFO (FString(__FUNCTION__)+\"[\"+FString::FromInt(__LINE__)+\"]\")\n#define ED_LOG(Verbosity, Format, ...) UE_LOG(LogGamePlatformEditor, Verbosity, TEXT(\"%s \") Format, *ED_LOG_CALLINFO, ##__VA_ARGS__)\n\n// TCHAR, FString 각각의 미묘한 차이\nTCHAR CharArr = TEXT(\"hello\")\nFString String = CharArr\nUE_LOG(LogTemp, Log, CharArr);\nUE_LOG(LogTemp, Log, \"TEXT(\"%s\")\", *String);\n\nif (String.Contains(TEXT(\"hell\")), ESearchCase::IgnoreCase) {}\nFString Left, Right;\nif (String.Split(TEXT(\"ll\"), &Left, &Right)) {}\n\nFName\t// 애셋 관리를 위해 사용됨. 대소문자 구분 없음, 가벼움\nFText\t// 다국어 지원을 위함\n\nuint8\nint64\nint32 IntValue = 32;\nFString IntString = FString::FromInt(IntValue);\n\n데이터 저장(UProperty) 같은 경우 bool 사용이 안됨\nbool 타입 선언 방법\nb접두사 붙여서 uint8로 선언\nex) uint8 bNetTemporary:1 (:1은 비트필드)\n\n// 언리얼 객채 생성하기\nUXxxx* Xxxx = NewObject<UXxxx>();\n\n// 언리얼 인터페이스\n// cpp에서는 인터페이스가 따로 없지만 언리얼에서는 class를 이용하여 유사하게 설계 가능하다\nUNREALINTERFACE_API\n\n// 언리얼 스마트 포인터\nTSharedPtr(공유 포인터): 더이상 참조되지 않으면 메모리 해지\nTSharedRef(공유 참조): 메모리 보장(Not Null 보장)\nTWeakPtr(약한 포인터)\nTUniquePtr(고유 포인터): 지정한 곳에서만 메모리 관리\n함수 구문에서만 사용하고 바로 소멸시키고 싶을때 주로 사용함\nTObjectPtr(게임코드에 맞는 별도의 메모리 추적 시스템을 이용하기에 UObject 전용)\n\n// TArray, TSet\nTArray<int32> IntArray;\nIntArray/Init(10, 5);\t// == [10, 10, 10, 10, 10]\nIntArray.Add(1);\t// 끝에 추가\nIntArray.Emplace(11);\t// Add랑 같은 일을 하지만 값 복사가 없어서 퍼포먼스 좋음\n// Append 다수값 넣을때\n// Insert\nfor (const auto& Int : IntArray) {}\nint32 Count = IntArray.Num();\nIntArray.IsValidIndex(5)\n// 람다함수를 이용한 필터링\nIntArray.RemoveAll(\n\t[](int32 Val)\n  {\n  \treturn Val % 2 == 0;\n  }\n)\n// 오퍼레이터로 넣기\nIntArray += {2, 4, 6}\n\n// 댕글링 포인터 체크\n::IsValid()\n// UPROPERTY로 참조된 언리얼 오브젝트는 가비지콜렉터로부터 회수되지 않는다\n\n// 직렬화\nFArchive을 이용 \nUObject는 시리얼라이즈 기본적으로 구현되어있고 프로퍼틴 순번만 정해주면 된다\n// Json\nbuild.cs에 JSON, JSONUTILS 임포트 필요"
        }
      ],
      "id": "GQVV2Beh",
      "createdAt": 1739510270922,
      "updatedAt": 1742534146937
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vs7wRccf",
      "tagsIds": [],
      "description": null,
      "name": "Visual Studio",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "자동정렬: ctrl + K + F\n\n해더에 선언된 메서드 구현체 생성: art + enter\n\n라이브코딩: ctrl + art + f11\n\n언리얼 에디터 열기: ctrl + f5\n\n언리얼 값 디버깅하기\n빌드 속성을 디벨롭먼트에서 디버그게임 에디터로 변경해야지 가능"
        }
      ],
      "id": "BDImCtMp",
      "createdAt": 1741158143478,
      "updatedAt": 1742365315039
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "Actix & Diesel",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "// Diesel\n\n// 스키마 DB 읽어서 자동 생성\ndiesel print-schema > src/schema.rs\n\n\ndiesel migration run 명령어 알아보기!!\n무서워서 일단은 안쓸예정\nhttps://github.com/atanmarko/rust-diesel-examples\n이거 참고하면 좋을듯"
        }
      ],
      "id": "0jTCz0bG",
      "createdAt": 1741783210694,
      "updatedAt": 1741784803510
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "Life Cycle",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "// 'a는 라이프타임(Lifetime) 매개변수\npub struct NewUser<'a> {\n    pub first_name: &'a str,\n    pub last_name: &'a str,\n    pub email: &'a str,\n    pub created_at: chrono::NaiveDateTime,\n}\n// 이 구조체는 'a 라이프타임 동안 유효함\n\t•\tRust는 메모리 안정성을 보장하기 위해, 소유권(Ownership)과 대여(Borrowing) 시스템을 사용합니다.\n\t•\t참조 타입(&str)은 기본적으로 소유권을 가지지 않으며, 그 값이 살아있는 동안만 유효합니다.\n\t•\t만약 'a를 사용하지 않으면, Rust는 NewUser가 참조하는 문자열이 구조체보다 더 짧게 존재할 수도 있다고 판단하여 컴파일 에러를 발생시킵니다.\n  - 만약 String 을 사용하면 String은 소유권을 가지므로 라이프타임 매개변수가 필요없음"
        }
      ],
      "id": "Y3L6Scxa",
      "createdAt": 1741783227712,
      "updatedAt": 1741783240259
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vs7wRccf",
      "tagsIds": [],
      "description": null,
      "name": "VSCode",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "정렬: Shift(⇧) + Option(⌥) + F"
        }
      ],
      "id": "3D5hK6_x",
      "createdAt": 1741783375666,
      "updatedAt": 1741783396440
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "amHWqhN6",
      "tagsIds": [],
      "description": null,
      "name": "Unreal ETC",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "팁\n- 유니코드를 위해서 스트링은 항상 Text(\"\") 로 감싸는게 좋다\n- 언리얼은 기본적으로 파스칼 케이스\n- 소스코드에 한글이 들어가면 수정 소스 저장할때 utf-8 지정해줘야함\n\n에러체크\ncheck(1==2);\t// 크래시 되면서 에러 출력\nensure(1==2, TEXT(\"일부러 발생시킨 로그\"));\t// 로그창에 크래시로그 출력\n\n"
        }
      ],
      "id": "iIpFqr0a",
      "createdAt": 1742272583258,
      "updatedAt": 1742282103609
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "vs7wRccf",
      "tagsIds": [],
      "description": null,
      "name": "Debugging",
      "content": [
        {
          "label": "Fragment 1",
          "language": "markdown",
          "value": "# dSYM 파일로 정확한 코드 라인 찾기\n## 크래시 스택 트레이스 예시\n 1  LM!-[NpHttpManager makeNPBasicRequestWithUrl:httpMethod:requestParams:requestTransactionId:apiDomain:] + 0x170\n      sp = 0x000000017d01acb0     pc = 0x0000000104364a18\n    Found by: previous frame's frame pointer  \n- pc = 0x0000000104364a18 → 이 값이 크래시 발생 주소!\n\n## 앱 메모리 주소 확인\nLoaded modules:\n0x104244000 - 0x1094bbfff  App  ???  (main)\n- 0x104244000 → 앱(App)의 로드 주소 (메모리에 로드된 시작 주소)\n- 0x1094bbfff → 앱이 차지하는 메모리의 끝 주소\n- (동적 라이브러리일 경우 라이브러리꺼 봐야함)\n\n## atos로 정확한 소스 코드 라인 반환하기\natos -o MyApp.app.dSYM/Contents/Resources/DWARF/MyApp -arch arm64 -l 0x104244000 0x104364a18\n- -l 0x104244000 → 앱의 로드 주소\n- 0x104364a18 → 크래시 발생 주소\n\n## adb로 안드로이드 무선 디버깅하기\nadb pair 172.19.18.184:40649\nEnter pairing code: 088333\nadb connect 172.19.18.184:38167"
        }
      ],
      "id": "y4sFmOBp",
      "createdAt": 1742286464126,
      "updatedAt": 1743638472007
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "amHWqhN6",
      "tagsIds": [],
      "description": null,
      "name": "Unreal Delegate",
      "content": [
        {
          "label": "Fragment 1",
          "language": "plain_text",
          "value": "https://dev.epicgames.com/documentation/ko-kr/unreal-engine/delegates-and-lamba-functions-in-unreal-engine\n\n// 유형\nDECLARE_DELEGATE: 1:1\nDECLARE_MULTICAST: 1:다\nDECLARE_DYNAMIC: 1:1 형태로 블루프린트 지원\nDECLARE_DYNAMIC_MULTICAST: 1:다 형태로 블루프린트 지원\n\n// 인자가 하나고 반환값이 없으면\nxxx_OneParam\n\n// 인자가 세 개고 반환값이 있으면\nxxx_RetVal_ThreeParams  (RetVal은 Return Value의 줄임말)"
        }
      ],
      "id": "Iowkvj7k",
      "createdAt": 1742357837801,
      "updatedAt": 1742359568228
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "모듈화",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "crate::\t현재 크레이트의 최상위 경로에서 시작\tcrate::schema::users\nself::\t현재 모듈을 기준으로 참조\tself::helper_function()\nsuper::\t부모 모듈을 기준으로 참조\tsuper::parent_function()\nmod\t새로운 모듈 선언\tmod schema;\n\n// 모듈 선언 방법\nmod outer {\n    pub mod inner {\n        pub fn say_hello() {\n            println!(\"Hello from inner module!\");\n        }\n    }\n}\n\nfn main() {\n    outer::inner::say_hello(); // ✅ 하위 모듈 호출\n}\n\npub use inner::say_hello;\t// 모듈에서 이렇게 선언하면 바로 outer::say_hello()로 경로 단순화 가능\n\n// Prelude\nuse로 가져오지도 않았는데 어떻게 어디서나 Vec나 Box를 쓸 수 있는지 궁금하실지도 모르겠습니다. 이는 standard library의 prelude module 덕분\nhttps://velog.io/@wjddlstn0614/Rust-Prelude"
        }
      ],
      "id": "EEmkXNP_",
      "createdAt": 1742100231511,
      "updatedAt": 1742101434041
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "qzhsCzAb",
      "tagsIds": [],
      "description": null,
      "name": "Hash Map",
      "content": [
        {
          "label": "Fragment 1",
          "language": "rust",
          "value": "use std::collections::HashMap;\n\nlet original: [i32; 3] = [1, 2, 3];\n\nlet map1 = HashMap::from([(1, 2), (3, 4)]);\nlet map2: HashMap<_, _> = [(1, 2), (3, 4)].into();\nassert_eq!(map1, map2);\n\n// 동적 디스패치\nlet mut map: HashMap<String, Box<dyn Any>> = HashMap::new();\n\nmap.insert(\"int\".to_string(), Box::new(42)); // i32 저장\nmap.insert(\"float\".to_string(), Box::new(3.14)); // f64 저장\nmap.insert(\"string\".to_string(), Box::new(\"Hello\".to_string())); // String 저장\n\n// ✅ 값을 꺼낼 때 다운캐스팅 필요\nif let Some(value) = map.get(\"int\") {\n  if let Some(num) = value.downcast_ref::<i32>() {\n    println!(\"int: {}\", num);\n  }\n}\n\nif let Some(value) = map.get(\"float\") {\n  if let Some(num) = value.downcast_ref::<f64>() {\n  \tprintln!(\"float: {}\", num);\n  }\n}\n\nif let Some(value) = map.get(\"string\") {\n  if let Some(text) = value.downcast_ref::<String>() {\n  \tprintln!(\"string: {}\", text);\n  }\n}"
        }
      ],
      "id": "Ua14Crz7",
      "createdAt": 1742106058979,
      "updatedAt": 1742106089392
    },
    {
      "isDeleted": false,
      "isFavorites": false,
      "folderId": "amHWqhN6",
      "tagsIds": [],
      "description": null,
      "name": "\bUnreal \bAlgo",
      "content": [
        {
          "label": "Fragment 1",
          "language": "c_cpp",
          "value": "// map 고차함수와 같음\nAlgo::Transform(arr, newArr,\n\t[](const data& Val)\n  {\n\t\treturn Val.key;  \n  }\n);\n\n// Arr을 TMap으로 만들기\nAlgo::Transform(arr, newMap,\n\t[](const data& Val)\n  {\n\t\treturn TPair<int32, FString>(Val.Order, Val.key);  \n  }\n);"
        }
      ],
      "id": "Mtw8ffNF",
      "createdAt": 1742522494780,
      "updatedAt": 1742524569622
    }
  ],
  "tags": []
}